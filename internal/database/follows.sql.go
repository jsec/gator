// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFollow = `-- name: CreateFollow :one
with follow as (
  insert into feed_follows (id, user_id, feed_id, created_at, updated_at)
  values ($1, $2, $3, $4, $5)
  returning id, user_id, feed_id, created_at, updated_at
)
select 
  follow.id, follow.user_id, follow.feed_id, follow.created_at, follow.updated_at,
  f.name as feed_name,
  u.name as user_name
from follow
join feeds f on follow.feed_id = f.id
join users u on follow.user_id = u.id
`

type CreateFollowParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFollowRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (CreateFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const getFollowsForUser = `-- name: GetFollowsForUser :many
select 
  ff.id,
  f.name
from feed_follows ff
join feeds f on ff.feed_id = f.id
where ff.user_id = $1
`

type GetFollowsForUserRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowsForUserRow
	for rows.Next() {
		var i GetFollowsForUserRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
